TestCase subclass: #BlankCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!BlankCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 18:36'!testCellExitSides	| cell exit |	cell := BlankCell new.	exit := cell exitSideFor: #north.	self should: [exit = #south].	exit := cell exitSideFor: #east.	self should: [exit = #west].	exit := cell exitSideFor: #south.	self should: [exit = #north].			exit := cell exitSideFor: #west.	self should: [exit = #east].! !!BlankCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 18:37'!testCellLaserActivity	| cell |	cell := BlankCell new.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].! !!BlankCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 17:47'!testCellOnState	| cell |	cell := BlankCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !!BlankCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 18:05'!testCellSegmentsState	| cell |	cell := BlankCell new.	self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].
	self shouldnt: [cell isSegmentOnFor: #west].! !TestCase subclass: #GridDirectionTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!GridDirectionTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 23:31'!testDirectionSelection	| direction |	"test GridDirectionNorth"	direction := GridDirection directionFor: #north.	self should: [direction = GridDirectionNorth].	self should: [direction vector = (0@ -1)].	self should: [direction adjacentInversionSymbol = #south].		"test GridDirectionEast"	direction := GridDirection directionFor: #east.	self should: [direction = GridDirectionEast].	self should: [direction vector = (1@0)].	self should: [direction adjacentInversionSymbol = #west].		"test GridDirectionSouth"	direction := GridDirection directionFor: #south.	self should: [direction = GridDirectionSouth].	self should: [direction vector = (0@1)].	self should: [direction adjacentInversionSymbol = #north].		"test GridDirectionWest"	direction := GridDirection directionFor: #west.	self should: [direction = GridDirectionWest].	self should: [direction vector = (-1@0)].	self should: [direction adjacentInversionSymbol = #east].! !TestCase subclass: #GridTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!GridTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:48'!generateDemoGrid	| grid |	grid := Grid newOfSize: 5@5.	grid at: 5@1 put: TargetCell new.	grid at: 4@1 put: MirrorCell leanRight.	grid at: 1@2 put: MirrorCell leanRight.	grid at: 5@2 put: MirrorCell leanLeft.	grid at: 2@3 put: MirrorCell leanLeft.	grid at: 3@3 put: MirrorCell leanRight.	grid at: 5@3 put: MirrorCell leanLeft.	grid at: 2@4 put: MirrorCell leanLeft.	grid at: 3@4 put: MirrorCell leanLeft.	grid at: 1@5 put: MirrorCell leanRight.	grid at: 4@5 put: MirrorCell leanRight.	^grid! !!GridTestCase methodsFor: 'tests' stamp: 'sjh 4/16/2013 00:04'!testCellInteractions	| grid cell expectedActiveLocationsList foundOn |	grid := self generateDemoGrid.	cell := grid at: 5@1.	self should: [cell isOff].	grid activateCellsInPath.	self should: [cell isOn].	expectedActiveLocationsList := {		1@5.		2@5.		3@5.		4@5.		4@4.		4@3.		4@2.		4@1.		5@1		}.	foundOn := grid cells select: [:each | each isOn].	self should: [foundOn size = expectedActiveLocationsList size].	foundOn do: [:fCell |		self should: [expectedActiveLocationsList includes: fCell gridLocation]]! !!GridTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:41'!testInitialConditions	| grid cell |	grid := Grid new.	self shouldnt: [grid laserIsActive].	cell := grid at: 1@1.	self should: [cell class = BlankCell].! !!GridTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:42'!testNonDefaultGridSizeInitialConditions	| grid cell |	grid := Grid newOfSize: 4@4.	self shouldnt: [grid laserIsActive].	cell := grid at: 1@1.	self should: [cell class = BlankCell].	cell := grid at: 2@3.	self should: [cell class = BlankCell].	self should: [cell isOff].! !TestCase subclass: #MirrorCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:28'!testCellExitSidesMirrorLeft	| cell exit |	cell := MirrorCell new.	exit := cell exitSideFor: #north.	self should: [exit = #east].	exit := cell exitSideFor: #east.	self should: [exit = #north].	exit := cell exitSideFor: #south.	self should: [exit = #west].			exit := cell exitSideFor: #west.	self should: [exit = #south].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:32'!testCellExitSidesMirrorRight	| cell exit |	cell := MirrorCell new.	cell leanRight.	exit := cell exitSideFor: #north.	self should: [exit = #west].	exit := cell exitSideFor: #east.	self should: [exit = #south].	exit := cell exitSideFor: #south.	self should: [exit = #east].			exit := cell exitSideFor: #west.	self should: [exit = #north].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:59'!testCellLaserActivityMirrorLeft	| cell |	cell := MirrorCell leanLeft.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:59'!testCellLaserActivityMirrorRight	| cell |	cell := MirrorCell leanRight.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self should: [cell isSegmentOnFor: #west].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:27'!testCellOnState	| cell |	cell := MirrorCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !!MirrorCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 19:27'!testCellSegmentsState	| cell |	cell := MirrorCell new.	self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !TestCase subclass: #TargetCellTestCase	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Laser-Game-Tests'!!TargetCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:10'!testCellExitSides	| cell inputSides |	cell := TargetCell new.	inputSides := #(#north #east #south #west).	inputSides do: [:inputSide |		| exit |		exit := cell exitSideFor: inputSide.		self should: [exit isNil]]! !!TargetCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:13'!testCellLaserActivity	| cell |	cell := TargetCell new.	cell laserEntersFrom: #north.	self should: [cell isOn].	self should: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #west].	! !!TargetCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:06'!testCellOnState	| cell |	cell := TargetCell new.	self should: [cell isOff].	self shouldnt: [cell isOn].	! !!TargetCellTestCase methodsFor: 'tests' stamp: 'sjh 4/15/2013 20:06'!testCellSegmentsState	| cell |	cell := TargetCell new.	self shouldnt: [cell isSegmentOnFor: #north].	self shouldnt: [cell isSegmentOnFor: #east].	self shouldnt: [cell isSegmentOnFor: #south].	self shouldnt: [cell isSegmentOnFor: #west].! !